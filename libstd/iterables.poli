with class from class


for = [iter, body] ~ generic "for" iterator function
   while true
      ... = iter.next()
      if (not ...) break
      val = body(...)
      if (val) return val



range = ~ range iterable class
   index!: class ~ make `range` a class

   init: [self, int a, int b, int step]
      int .start = b and a or 0
      int .end   = b or a
      int .step  = step or .end<0 and -1 or 1
      int .curr  = null

   next: [self ->int]
      if not .current
         if (.curr == .start) return null
         .curr = .start

      elif (.step>0 and .curr<=.end) or (.step<0 and .curr>=.end)
         .curr += .step

      else
         return null

      return .curr

~~~
for range(10), []
    stdout.write(i)
~~~



switch = [value, callback]
   callback([values]
      val = for values, [item]
         if (item==value) return true
   )

~~~
switch var, [case]
   if case 1
      stdout.write "case 1"
      break
   if case 2, 3
      stdout.write "case 2 or 3"
      break

   stdout.write "default"
~~~

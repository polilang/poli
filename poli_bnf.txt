string  :=  " {<ascii>} "
        |   ' {<ascii>} '

integer :=  <digit> {<number>}

float   :=  {<integer>}.<integer>

number  :=  <integer | float>

bool    :=  true
        |   false
        |   null

add     :=  +
sub     :=  -
mul     :=  *
div     :=  /
mod     :=  %
pow     :=  ^
op-math :=  <add | sub | mul | div | mod | pow>

lt      :=  <
gt      :=  >
le      :=  <= | =<
ge      :=  >= | =>
eq      :=  ==
ne      :=  !=
or      :=  or
and     :=  and
not     :=  not
op-bool :=  <lt | gt | le | ge | eq | ne | or | and | not>

op      := <op-math | op-bool>

bar     :=  |
lparen  :=  (
rparen  :=  )
assign  :=  =
colon   :=  :
newline :=  \n {\r}
arrow   :=  ->
uscore  :=  _
dot     :=  .



word    :=  <alpha | digit | uscore | dot> {<word>}

param   :=  <word> {, <param>}
args    :=  <expr> {, <expr>}

atom    :=  <string | number | bool | word | fn-call>

expr    :=  <atom> {<op> <expr>}
exp-bool:=  <atom> {<op-bool> <exp-bool>}
exp-math:=  <atom> {<op-math> <exp-math>}

if      :=  if <exp-bool> <arrow> <statement>
        |   if <exp-bool>
                <block>
            {elif <exp-bool>
                <block>}
            {else
                <block>}

for     :=  for {<param> in} <iterable> <arrow> <statement>
        |   for {<param> in} <iterable>
                <block>

lambda  :=  <lparen> {<param>} <colon> {return} <expr> <rparen>

fn-def  :=  <word> <assign> {<param>} <colon> {return} <expr>
        |   <word> <assign> {<param>} <colon>
                <block>
                {return <expr>}


fn-call :=  <lambda | word> {lparen} <args> {rparen}

assignmt:=  <param> <assign> <args>

class   :=  <word> <colon>
                <block>

import  :=  with <param> {from <word>}

ffi     :=  with <dynamic-link-library> from ffi
